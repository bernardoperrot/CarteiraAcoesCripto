from . import db
from sqlalchemy.sql import func
from flask_login import UserMixin
from flask_admin.contrib.sqla import ModelView
from . import admin

class Usuario(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique= True)
    senha = db.Column(db.String(100))
    nome = db.Column(db.String(150))
    total = db.Column(db.Float)
    total_acoes = db.Column(db.Float)
    total_criptos = db.Column(db.Float)
    total_criptosR = db.Column(db.Float)
    acoes = db.relationship('Acao')
    preco_medio_acao = db.relationship('CompraAcao')
    hist_acao = db.relationship('HistAcao')
    watch_list = db.relationship('WatchList')
    carteira_acoes = db.relationship('CarteiraAcoes')
    cryptos = db.relationship('Crypto')
    hist_cripto = db.relationship('HistCripto')
    carteira_cripto = db.relationship('CarteiraCripto')
    
class CompraAcao(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ticker = db.Column(db.String(10))
    preco_pago = db.Column(db.Float)
    valor_pago = db.Column(db.Float)
    quantidade = db.Column(db.Integer)
    data_compra = db.Column(db.Date)
    preco_atual = db.Column(db.Float)
    valor_atual = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade = db.Column(db.Float)
    status = db.Column(db.String)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    link = db.Column(db.String)
    last_dividend = db.Column(db.Float)
    total_dividends = db.Column(db.Float)
    yield_total = db.Column(db.Float)
    descricao = db.Column(db.String)

class Acao(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ticker = db.Column(db.String(10))
    preco_medio = db.Column(db.Float)
    valor_pago = db.Column(db.Float)
    quantidade = db.Column(db.Integer)
    data_compra_inicial = db.Column(db.Date)
    preco_atual = db.Column(db.Float)
    valor_atual = db.Column(db.Float)
    peso = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade = db.Column(db.Float)
    status = db.Column(db.String)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    link = db.Column(db.String)
    link_investidor10 = db.Column(db.String)
    last_dividend= db.Column(db.Float)
    data_ultimo_provento = db.Column(db.Date)
    total_dividends = db.Column(db.Float)
    yield_total = db.Column(db.Float)

class WatchList(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    ticker = db.Column(db.String)
    preco_abertura = db.Column(db.Float)
    preco = db.Column(db.Float)
    dif_por = db.Column(db.Float)
    link_trading_view = db.Column(db.String)
    link_investidor10 = db.Column(db.String)

class HistTradeAcao(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable = False)
    ticker = ticker = db.Column(db.String)
    preco_compra = db.Column(db.Float)
    preco_venda = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade = db.Column(db.Float)
    data_compra = db.Column(db.Date)
    data_venda = db.Column(db.Date)

class HistAcao(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    ticker = db.Column(db.String)
    descricao = db.Column(db.String)
    preco = db.Column(db.Float)
    quantidade = db.Column(db.Integer)
    valor = db.Column(db.Float)
    tipo = db.Column(db.String)
    data = db.Column(db.Date)

class CarteiraAcoes(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    valor_pago_total = db.Column(db.Float)
    valor_atual_total = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade_total = db.Column(db.Float)
    status = db.Column(db.String)
    total_dividendos = db.Column(db.Float, nullable=True)
    retorno_dividendos = db.Column(db.Float)
    last_update = db.Column(db.Date, nullable=True)

class Crypto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ticker = db.Column(db.String(10))
    preco_pago = db.Column(db.Float)
    valor_pago = db.Column(db.Float)
    quantidade = db.Column(db.Integer)
    data_compra = db.Column(db.Date)
    preco_atual = db.Column(db.Float)
    valor_atual = db.Column(db.Float)
    peso = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade = db.Column(db.Float)
    status = db.Column(db.String)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    link = db.Column(db.String)

class HistTradeCripto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable = False)
    ticker = ticker = db.Column(db.String)
    preco_compra = db.Column(db.Float)
    preco_venda = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade = db.Column(db.Float)
    data_compra = db.Column(db.Date)
    data_venda = db.Column(db.Date)

class CarteiraCripto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    valor_pago_total = db.Column(db.Float)
    valor_atual_total = db.Column(db.Float)
    lucro_prejuizo = db.Column(db.Float)
    rentabilidade_total = db.Column(db.Float)
    status = db.Column(db.String)
    last_update = db.Column(db.Date, nullable=True)

class HistCripto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    ticker = db.Column(db.String)
    descricao = db.Column(db.String)
    preco = db.Column(db.Float)
    quantidade = db.Column(db.Float)
    valor = db.Column(db.Float)
    tipo = db.Column(db.String)
    data = db.Column(db.Date)



admin.add_view(ModelView(Usuario, db.session))
admin.add_view(ModelView(Acao, db.session))
admin.add_view(ModelView(CompraAcao, db.session))
admin.add_view(ModelView(Crypto, db.session))
admin.add_view(ModelView(CarteiraCripto, db.session))
admin.add_view(ModelView(CarteiraAcoes, db.session))
admin.add_view(ModelView(HistAcao, db.session))
admin.add_view(ModelView(HistCripto, db.session))
# admin.add_view(ModelView(WatchList, db.session))

